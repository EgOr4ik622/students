class RoomStatistics:
    def __init__(self, db_manager, table_name, name_room_tb):
        self.db_manager = db_manager
        self.table_name = table_name
        self.name_room_tb = name_room_tb

    def get_top_rooms_by_age_difference(self, limit=5):
        query = f"""
            SELECT 
                {self.name_room_tb}.name AS room_name,
                MAX(EXTRACT(YEAR FROM AGE({self.table_name}.birthday))) - 
                MIN(EXTRACT(YEAR FROM AGE({self.table_name}.birthday))) AS age_diff
            FROM {self.table_name}
            JOIN {self.name_room_tb} ON {self.name_room_tb}.id = {self.table_name}.room
            GROUP BY {self.name_room_tb}.id, {self.name_room_tb}.name
            ORDER BY age_diff DESC
            LIMIT 5
        """
        return self.db_manager.execute_query(query, fetch=True) or []

    def get_top_rooms_by_avg_age(self, limit=5):
        query = f"""
            SELECT 
                {self.name_room_tb}.name AS room_name,
                AVG(EXTRACT(YEAR FROM AGE({self.table_name}.birthday))) AS avg_age
            FROM {self.table_name} 
            JOIN {self.name_room_tb} ON {self.table_name}.room = {self.name_room_tb}.id
            GROUP BY {self.name_room_tb}.id, {self.name_room_tb}.name
            ORDER BY avg_age DESC
            LIMIT 5
        """
        return self.db_manager.execute_query(query, fetch=True) or []

    def get_rooms_with_mixed_sex(self):
        query = f"""
            SELECT {self.name_room_tb}.name AS room_name
            FROM {self.name_room_tb}
            JOIN {self.table_name} ON {self.name_room_tb}.id = {self.table_name}.room
            GROUP BY {self.name_room_tb}.id
            HAVING COUNT(DISTINCT {self.table_name}.sex) > 1
            ORDER BY {self.name_room_tb}.name 
        """
        return self.db_manager.execute_query(query, fetch=True) or []

    def get_rooms_with_student_count(self):
        query = f"""
            SELECT 
                {self.name_room_tb}.name AS room_name,
                COUNT({self.table_name}.id) AS residents_count
            FROM {self.table_name}
            JOIN {self.name_room_tb} ON {self.name_room_tb}.id = {self.table_name}.room 
            GROUP BY {self.name_room_tb}.id, {self.name_room_tb}.name     
            ORDER BY {self.name_room_tb}.id;           
        """
        return self.db_manager.execute_query(query, fetch=True) or []
