import json
import psycopg2
import xml.etree.ElementTree as ET

print("Выберите формат данных:")
print("1 - JSON")
print("2 - XML")
choice = input("Введите номер выбора (1 или 2): ")
name_db = input('Введите название БД: ')
name_tb = input('Введите название таблицы: ')

# Создание базы данных
conn = psycopg2.connect(dbname="postgres", user="postgres", password="egor4ic", host="127.0.0.1")
cursor = conn.cursor()
conn.autocommit = True
sql = f"CREATE DATABASE {name_db}"
cursor.execute(sql)
print(f"База данных {name_db} успешно создана")
cursor.close()
conn.close()

# Создание таблицы
conn = psycopg2.connect(dbname=name_db, user="postgres", password="egor4ic", host="127.0.0.1")
cursor = conn.cursor()
cursor.execute(f"CREATE TABLE {name_tb} (birthday DATE, id SERIAL PRIMARY KEY, name VARCHAR(70), room INTEGER, sex VARCHAR(50))")
conn.commit()
print(f"Таблица {name_tb} успешно создана")
cursor.close()
conn.close()

# Импорт данных из JSON
with open('students.json', 'r', encoding='utf-8') as file:
    data = json.load(file)

for i in data:
    print(i)

    conn = psycopg2.connect(dbname=name_db, user="postgres", password="egor4ic", host="127.0.0.1")
    cursor = conn.cursor()

    query = f"""
        INSERT INTO {name_tb} (birthday, id, name, room, sex) 
        VALUES (%s, %s, %s, %s, %s)
    """
    values = (i['birthday'], i['id'], i['name'], i['room'], i['sex'])

    cursor.execute(query, values)
    conn.commit()
    print("Данные добавлены")

    cursor.close()
    conn.close()


# №2 Подключение к базе данных для вычисления 5 комнат с большой разницей в возрасте
conn = psycopg2.connect(
    dbname=name_db,  # Убедитесь, что это правильное имя базы данных
    user="postgres",
    password="egor4ic",
    host="127.0.0.1"
)
cursor = conn.cursor()

# Параметризованный запрос с 5 комнатмиб с большой разницей в возрасте
query = f"""
               WITH age_stats AS (
                   SELECT 
                       room,
                       MAX(EXTRACT(YEAR FROM AGE(birthday))) - MIN(EXTRACT(YEAR FROM AGE(birthday))) AS age_difference,
                       MAX(EXTRACT(YEAR FROM AGE(birthday))) AS max_age,
                       MIN(EXTRACT(YEAR FROM AGE(birthday))) AS min_age,
                       COUNT(*) AS residents_count
                   FROM
                       {name_tb}
                   GROUP BY room
                   HAVING COUNT(*) > 1
               )
               SELECT 
                   room, age_difference, min_age, max_age, residents_count
               FROM age_stats
               ORDER BY age_difference DESC
               LIMIT 5;
       """

cursor.execute(query)
different_age = cursor.fetchall()

if choice == '1':
    # Подготовка данных для JSON - теперь учитываем все столбцы
    result = [{
        "room": row[0],
        "age_difference": float(row[1]),  # Преобразуем Decimal в float
        "min_age": float(row[2]),
        "max_age": float(row[3]),
        "residents_count": row[4]
    } for row in different_age]

    # Запись в JSON-файл
    with open('different_age.json', 'w', encoding='utf-8') as f:
        json.dump(result, f, indent=4, ensure_ascii=False)

    print("Результаты успешно сохранены в different_age.json")
else:
    # 1. Создаем корневой элемент
    root = ET.Element("RoomsStatistics")

    # 2. Добавляем данные для каждой комнаты
    for room, age_difference, min_age, max_age, residents_count in different_age:
        # Создаем элемент Room
        room_elem = ET.SubElement(root, "Room")

        # Добавляем атрибуты
        room_elem.set("room", str(room))
        room_elem.set("age_difference", str(age_difference))
        room_elem.set("min_age", str(min_age))
        room_elem.set("max_age", str(max_age))
        room_elem.set("residents_count", str(residents_count))
    # 3. Создаем XML-дерево
    tree = ET.ElementTree(root)

     # 4. Записываем в файл
    tree.write('different_age.xml',
               encoding='utf-8',
               xml_declaration=True,
               short_empty_elements=False)

    print("XML-файл different_age успешно создан")


# №1 Запрос с 5 максимальными средними возрастами
conn = psycopg2.connect(dbname=name_db, user="postgres", password="egor4ic", host="127.0.0.1")
cursor = conn.cursor()
query = f"""
    SELECT
        room, ROUND(AVG(EXTRACT(YEAR FROM AGE(birthday)))::numeric, 2) AS average_age
    FROM
        {name_tb}
    GROUP BY 
        room
    ORDER BY
        room DESC
    LIMIT 5
"""
cursor.execute(query)
avg_min = cursor.fetchall()
cursor.close()
conn.close()
if choice == '1':
    data = [{"room": room, "average_age": float(age)} for room, age in avg_min]
    with open('top_rooms_by_age.json', 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=4, ensure_ascii=False)
    print("Данные сохранены в avg_min.json")
else:
    # 1. Создаем корневой элемент
    root = ET.Element("RoomsStatistics")

    # 2. Добавляем данные для каждой комнаты
    for room, avg in avg_min:
        # Создаем элемент Room
        room_elem = ET.SubElement(root, "Room")

        # Добавляем атрибуты
        room_elem.set("number", str(room))
        room_elem.set("average_age", str(avg))
    # 3. Создаем XML-дерево
    tree = ET.ElementTree(root)

     # 4. Записываем в файл
    tree.write('avg_min.xml',
               encoding='utf-8',
               xml_declaration=True,
               short_empty_elements=False)

    print("XML-файл avg_min успешно создан")

# №3 Подключение к базе данных для создания списка комнат с разнополыми жильцами
conn = psycopg2.connect(
    dbname=name_db,
    user="postgres",
    password="egor4ic",
    host="127.0.0.1"
)
cursor = conn.cursor()

# Список комнат с разнополыми жильцами
query = f"""
    SELECT
        room
    FROM
        {name_tb}
    GROUP BY
        room
    HAVING COUNT(DISTINCT sex) > 1;
    """

cursor.execute(query)
different_sex = cursor.fetchall()

if choice == '1':
    # Извлекаем только номера комнат (первый элемент каждого кортежа)
    room_numbers = [room[0] for room in different_sex]

    # Сохранение в JSON
    with open('different_sex.json', 'w', encoding='utf-8') as f:
        json.dump(room_numbers, f, indent=4)  # Просто список номеров комнат
    print("Результаты успешно сохранены в different_sex.json")
else:
    # 1. Создаем корневой элемент
    root = ET.Element("RoomsStatistics")

    # 2. Добавляем данные для каждой комнаты
    for room in different_sex:
        # Создаем элемент Room
        room_elem = ET.SubElement(root, "Room")
        # Добавляем атрибуты
        room_elem.set("number", str(room))
    # 3. Создаем XML-дерево
    tree = ET.ElementTree(root)

    # 4. Записываем в файл
    tree.write('different_sex.xml',
               encoding='utf-8',
               xml_declaration=True,
               short_empty_elements=False)

    print("XML-файл different_sex успешно создан")


# №4 Подключение к базе данных для создания списка комнат с количеством жильцов
conn = psycopg2.connect(
    dbname=name_db,
    user="postgres",
    password="egor4ic",
    host="127.0.0.1"
)
cursor = conn.cursor()

# Список комнат с количеством жильцов
query = f"""
    SELECT
        room,
        COUNT(id) AS residents_count
    FROM
        {name_tb}
    GROUP BY
        room
    ORDER BY
        room
"""

cursor.execute(query)
room_students = cursor.fetchall()

if choice == "1":
    # Создаем словарь для JSON из этих данных
    data_dict = {f"Room {room}": count for room, count in room_students}
    # Результат: {"Room 101": 2, "Room 102": 3, ...}

    # Записываем словарь в JSON-файл
    with open('room_students.json', 'w', encoding='utf-8') as f:
        json.dump(data_dict, f, indent=4, ensure_ascii=False)
    print("Результаты успешно сохранены в room_students.json")
else:
    # 1. Создаем корневой элемент
    root = ET.Element("RoomsStatistics")

    # 2. Добавляем данные для каждой комнаты
    for room, residents in room_students:
        # Создаем элемент Room
        room_elem = ET.SubElement(root, "Room")
        # Добавляем атрибуты
        room_elem.set("number", str(room))
        room_elem.set("residents_count", str(residents))
    # 3. Создаем XML-дерево
    tree = ET.ElementTree(root)

    # 4. Записываем в файл
    tree.write('room_students.xml',
               encoding='utf-8',
               xml_declaration=True,
               short_empty_elements=False)

    print("XML-файл room_students успешно создан")
