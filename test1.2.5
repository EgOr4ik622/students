def main():
    print("Укажите путь к файлу json c данными:")
    file_path = input()
    print("Выберите формат данных для выгрузки:")
    print("1 - JSON")
    print("2 - XML")
    choice = input("Введите номер выбора (1 или 2): ")
    name_db = input('Введите название БД: ')
    name_tb = input('Введите название таблицы: ')

    # Инициализация менеджера базы данных
    db_manager = DatabaseManager("postgres", "postgres", "egor4ic", "127.0.0.1")

    # Создание базы данных и таблицы
    db_manager.create_database(name_db)
    db_manager = DatabaseManager(name_db, "postgres", "egor4ic", "127.0.0.1")
    db_manager.create_table(name_tb)

    # Импорт данных
    importer = DataImporter(db_manager)
    importer.import_from_json(file_path, name_tb)

    # Анализ данных
    stats = RoomStatistics(db_manager, name_tb)
    exporter = DataExporter()

    # 1. Комнаты с наибольшей разницей в возрасте
    age_diff_data = stats.get_top_rooms_by_age_difference()
    if choice == '1':
        result = [{
            "room": row[0],
            "age_difference": float(row[1]),
            "min_age": float(row[2]),
            "max_age": float(row[3]),
            "residents_count": row[4]
        } for row in age_diff_data]
        exporter.export_to_json(result, 'different_age.json')
    elif choice == '2':
        exporter.export_to_xml(
            age_diff_data,
            'different_age.xml',
            "RoomsStatistics",
            "Room",
            ["room", "age_difference", "min_age", "max_age", "residents_count"]
        )
    else:
        print("ВВЕДЕН НЕВЕРНЫЕ ФОРМАТ ДАННЫХ")

    # 2. Комнаты с максимальным средним возрастом
    avg_age_data = stats.get_top_rooms_by_avg_age()
    if choice == '1':
        result = [{"room": room, "average_age": float(age)} for room, age in avg_age_data]
        exporter.export_to_json(result, 'top_rooms_by_age.json')
    elif choice == '2':
        exporter.export_to_xml(
            avg_age_data,
            'avg_min.xml',
            "RoomsStatistics",
            "Room",
            ["number", "average_age"]
        )
    else:
        print("ВВЕДЕН НЕВЕРНЫЕ ФОРМАТ ДАННЫХ")

    # 3. Комнаты с разнополыми жильцами
    mixed_sex_data = stats.get_rooms_with_mixed_sex()
    if choice == '1':
        exporter.export_to_json([room[0] for room in mixed_sex_data], 'different_sex.json')
    elif choice == '2':
        exporter.export_to_xml(
            mixed_sex_data,
            'different_sex.xml',
            "RoomsStatistics",
            "Room",
            ["number"]
        )
    else:
        print("ВВЕДЕН НЕВЕРНЫЕ ФОРМАТ ДАННЫХ")

    # 4. Комнаты с количеством жильцов
    room_students_data = stats.get_rooms_with_student_count()
    if choice == '1':
        result = {f"Room {room}": count for room, count in room_students_data}
        exporter.export_to_json(result, 'room_students.json')
    elif choice == '2':
        exporter.export_to_xml(
            room_students_data,
            'room_students.xml',
            "RoomsStatistics",
            "Room",
            ["number", "residents_count"]
        )
    else:
        print("ВВЕДЕН НЕВЕРНЫЕ ФОРМАТ ДАННЫХ")


if __name__ == "__main__":
    main()
